//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Systems/ArtilleryMovementControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ArtilleryMovementControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ArtilleryMovementControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ArtilleryMovementControls"",
    ""maps"": [
        {
            ""name"": ""ArtilleryCannon"",
            ""id"": ""1fc7a6fe-ee51-4091-9b71-4fabb0aa5339"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c6ee7601-73bc-48a6-a30d-248d4a2e836d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a1953ef4-729e-40f8-ba76-3581ab3cba7e"",
                    ""path"": ""<HID::Thrustmaster T.16000M>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ArtilleryCannon
        m_ArtilleryCannon = asset.FindActionMap("ArtilleryCannon", throwIfNotFound: true);
        m_ArtilleryCannon_Move = m_ArtilleryCannon.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ArtilleryCannon
    private readonly InputActionMap m_ArtilleryCannon;
    private IArtilleryCannonActions m_ArtilleryCannonActionsCallbackInterface;
    private readonly InputAction m_ArtilleryCannon_Move;
    public struct ArtilleryCannonActions
    {
        private @ArtilleryMovementControls m_Wrapper;
        public ArtilleryCannonActions(@ArtilleryMovementControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_ArtilleryCannon_Move;
        public InputActionMap Get() { return m_Wrapper.m_ArtilleryCannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArtilleryCannonActions set) { return set.Get(); }
        public void SetCallbacks(IArtilleryCannonActions instance)
        {
            if (m_Wrapper.m_ArtilleryCannonActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_ArtilleryCannonActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ArtilleryCannonActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ArtilleryCannonActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ArtilleryCannonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ArtilleryCannonActions @ArtilleryCannon => new ArtilleryCannonActions(this);
    public interface IArtilleryCannonActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
